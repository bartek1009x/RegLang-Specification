-- Minimal Vector class implementation example

class Vector<T> {
    public:

        Vector<T>(...T elements) {
            int amountOfElements = 0;

            -- first loop to count the elements
            for (T element : elements) {
                amountOfElements += 1;
            }

            array = new T[amountOfElements];
            size = amountOfElements;

            int index = 0;
            for (T element : elements) {
                array[index] = element;
                index += 1;
            }
        }

        -- default constructor for an empty vector
        Vector<T>() {
            array = new T[10];
            size = 0;
        }

        func push(T element) : void {
            if (size == array.length) {
                resize();
            }
            array[size - 1] = element;
        }

        func get(int index) : T {
            if (index >= size) {
                println("Index out of bounds"); -- should error, println is a placeholder
            }
            return array[index];
        }

        func size() : int {
            return size;
        }

    private:

        mut T?[] array;
        mut int size;

        func resize() : void {
            mut T?[] newArray = new T[array.length * 1.5];

            -- copy elements
            for (int i = 0; i < array.length; 1) {
                newArray[i] = array[i];
            }

            array = newArray;
        }
}
